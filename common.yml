#######################################
#    Tools Driver Config for MCI      #
#######################################
# default command type
command_type: system

# 3 hour default timeout
exec_timeout_secs: 10800

# run the same task in the previous revision if the current task fails
stepback: true

variables:
  # Common mongodb arguments
  mongod_arguments:
    default: &mongod_default_startup_args
      mongod_args: ""
      mongod_port: 33333
    ssl: &mongod_ssl_startup_args
      mongod_args: "--sslMode requireSSL --sslCAFile common/db/testdata/ca-ia.pem --sslPEMKeyFile common/db/testdata/test-server.pem"
      replsettest_ssl_config: "sslMode: \\\"requireSSL\\\",sslPEMKeyFile: \\\"common/db/testdata/test-server.pem\\\", sslCAFile: \\\"common/db/testdata/ca-ia.pem\\\", sslAllowInvalidHostnames: \\\"\\\""
      mongod_port: 33333
    tls: &mongod_tls_startup_args
      mongod_args_tls: "--tlsMode requireTLS --tlsCAFile common/db/testdata/ca-ia.pem --tlsCertificateKeyFile common/db/testdata/test-server.pem"
      replsettest_tls_config: "tlsMode: \\\"requireTLS\\\",tlsCertificateKeyFile: \\\"common/db/testdata/test-server.pem\\\", tlsCAFile: \\\"common/db/testdata/ca-ia.pem\\\", tlsAllowInvalidHostnames: \\\"\\\""
      mongod_port: 33333

  mongo_arguments:
    default: &mongo_default_startup_args
      mongo_args: &mongo_default_startup_args_string "--port 33333"
      mongod_port: 33333
    ssl: &mongo_ssl_startup_args
      mongo_args: "--port 33333 --ssl --sslCAFile common/db/testdata/ca-ia.pem --sslPEMKeyFile common/db/testdata/test-server.pem --sslAllowInvalidCertificates"
      mongod_port: 33333
    tls: &mongo_tls_startup_args
      mongo_args_tls: "--port 33333 --tls --tlsCAFile common/db/testdata/ca-ia.pem --tlsCertificateKeyFile common/db/testdata/test-server.pem --tlsAllowInvalidCertificates"
      mongod_port: 33333

functions:

  "run legacy tests":
    command: shell.exec
    type: test
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      script: |
        set -x
        set -v
        set -e
        chmod +x bin/*
        mv bin/* ${test_path}/
        cd ${test_path}
        ./mongo --nodb jstests/tool/*.js

  "run qa-tests":
    command: subprocess.exec
    params:
      binary: bash
      working_dir: src/github.com/mongodb/mongo-tools
      args:
        - "./scripts/run_qa.sh"
      add_expansions_to_env: true

  "run native-cert-ssl":
    command: subprocess.exec
    params:
      binary: bash
      working_dir: src/github.com/mongodb/mongo-tools
      args:
        - "./scripts/run_native_cert_ssl.sh"
      add_expansions_to_env: true

  "run make target":
    command: shell.exec
    type: test
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      script: |
        ${_set_shell_env}
        ${_maybe_enable_devtoolset_7}
        PATH=$PATH:$HOME
        go run build.go -v ${target}

  "download mongod":
    command: shell.exec
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      script: |
        set -x
        set -v
        set -e
        mongotarget=$(if [ "${mongo_target}" ]; then echo "${mongo_target}"; else echo "${mongo_os}"; fi)
        mongoversion=$(if [ "${mongo_version_always_use_latest}" ]; then echo "latest"; else echo "${mongo_version}"; fi)
        PATH=/opt/mongodbtoolchain/v3/bin/:$PATH
        python="python3"
        if [ "Windows_NT" = "$OS" ]; then
          python="py.exe -3"
        fi
        dlurl=$($python binaryurl.py --edition=${mongo_edition} --target=$mongotarget --version=$mongoversion --arch=${mongo_arch|x86_64})
        filename=$(echo $dlurl | sed -e "s_.*/__")
        mkdir -p bin
        curl -s $dlurl --output $filename
        ${decompress} $filename
        rm $filename
        if [ "${only_shell}" ]; then
          mv -f ./mongodb-*/bin/mongo${extension} ./bin/
        else
          mv -f ./mongodb-*/bin/mongo${extension} ./bin/
          mv -f ./mongodb-*/bin/mongos${extension} ./bin/
          mv -f ./mongodb-*/bin/mongod${extension} ./bin/
        fi
        if [ "Windows_NT" = "$OS" ]; then
          mv -f ./mongodb-*/bin/netsnmp.dll ./bin/
        fi
        chmod +x ./bin/*
        rm -rf ./mongodb-*

  "get buildnumber":
    command: keyval.inc
    params:
      key: "${build_variant}_tools"
      destination: "builder_num"

  "setup integration test":
    command: shell.exec
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      # Set up Kerberos stuff: run kinit if necessary, and add KDC to registry
      # on Windows (see https://wiki.mongodb.com/display/DH/Testing+Kerberos)
      script: |
        set -e
        # export sensitive info before `set -x`
        if [ '${run_kinit}' = 'true' ]; then
            # BUILD-3830
            mkdir -p "$(pwd)/.evergreen"
            touch "$(pwd)/.evergreen/krb5.conf.empty"
            export KRB5_CONFIG="$(pwd)/.evergreen/krb5.conf.empty"

            echo "Writing keytab"
            echo ${kerberos_keytab} | base64 -d > "$(pwd)/.evergreen/drivers.keytab"
            echo "Running kinit"
            kinit -k -t "$(pwd)/.evergreen/drivers.keytab" -p drivers@LDAPTEST.10GEN.CC;
        fi;
        set -x
        set -v
        if [ "Windows_NT" = "$OS" ]; then
          cmd /c "REG ADD HKLM\SYSTEM\ControlSet001\Control\Lsa\Kerberos\Domains\LDAPTEST.10GEN.CC /v KdcNames /d ldaptest.10gen.cc /t REG_MULTI_SZ /f"
        fi;

  "setup credentials" :
    command: shell.exec
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      silent: true
      script: |
        set -x
        set -v
        set -e
        cat > mci.buildlogger <<END_OF_CREDS
        slavename='${slave}'
        passwd='${passwd}'
        builder='MCI_${build_variant}'
        build_num=${builder_num}
        build_phase='${task_name}_${execution}'
        END_OF_CREDS
        # Resmoke hardcodes the location of this file so we need to copy it to the working directory
        # we run resmoke from.
        cp mci.buildlogger test/qa-tests

  "start mongod":
    command: shell.exec
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      background: true
      script: |
        set -x
        set -v
        set -e
        rm -rf mongodb/db_files mongodb/${logfile|run.log}
        mkdir -p mongodb/db_files
        MONGOD_ARGS="${mongod_args}"
        if [ "${USE_TLS}" = "true" ]; then
          MONGOD_ARGS="${mongod_args_tls}"
        elif [ "${AWS_AUTH}" = "true" ]; then
          MONGOD_ARGS="--auth --setParameter authenticationMechanisms=MONGODB-AWS,SCRAM-SHA-256"
        fi;
        echo "Starting mongod..."
        storage_args=''
        if [ "${STORAGE_ENGINE}" != '' ]; then
          storage_args='--storageEngine ${STORAGE_ENGINE}'
        fi
        PATH=$PWD/bin:$PATH ./bin/mongod${extension}  --port ${mongod_port} $MONGOD_ARGS ${additional_args} --dbpath mongodb/db_files --setParameter=enableTestCommands=1 $storage_args

  "start mongod cluster":
    command: shell.exec
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      background: true
      script: |
        set -x
        set -v
        set -e
        rm -rf mongodb/db_files mongodb/${logfile|run.log}
        mkdir -p mongodb/db_files
        MONGOD_ARGS="${mongod_args}"
        if [ "${USE_TLS}" = "true" ]; then
          MONGOD_ARGS="${mongod_args_tls}"
        fi;
        echo "Starting mongod cluster..."
        PATH=$PWD/bin:$PATH ./bin/mongod${extension}  --port ${mongod_port} $MONGOD_ARGS ${additional_args} --dbpath mongodb/db_files --setParameter=enableTestCommands=1 --replSet repltester

  "wait for mongod to be ready":
    command: shell.exec
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      script: |
        set -x
        set -v
        SECS=0
        MONGO_ARGS="${mongo_args}"
        if [ "${USE_TLS}" = "true" ]; then
          MONGO_ARGS="${mongo_args_tls}"
        elif [ "${AWS_AUTH}" = "true" ]; then
          MONGO_ARGS="--port 33333"
        fi;
        while true ; do
            set -o verbose

            ./bin/mongo${extension} $MONGO_ARGS --eval 'true;'
            if [ "$?" = "0" ]; then
                echo "mongod ready";
                exit 0
            else
                SECS=`expr $SECS + 1`
                if [ $SECS -gt 100 ]; then
                    echo "mongod not ready after 100 seconds"
                    exit 1
                fi
                echo "waiting for mongod $MONGO_ARGS to be ready..."  ;
                sleep 1 ;
            fi
        done

  "create mongod users":
    command: shell.exec
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      script: |
        ${_set_shell_env}
        MONGO_ARGS="${mongo_args}"
        if [ "${USE_TLS}" = "true" ]; then
          MONGO_ARGS="${mongo_args_tls}"
        fi
        echo "db.createUser({ user: '${auth_username}', pwd: '${auth_password}', roles: [{ role: '__system', db: 'admin' }] });" | ./bin/mongo${extension} $MONGO_ARGS admin

  "create release artifacts":
    # build release artifacts
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          ${_set_shell_env}
          go run release/release.go build-archive
          go run release/release.go build-packages

    # temporary workaround for TOOLS-2606
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          rm -rf ./mongorestore/testdata/longcollectionname/

    # upload individual release artifacts to task page
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongo-tools/release.*
          - src/github.com/mongodb/mongo-tools/*.deb
          - src/github.com/mongodb/mongo-tools/*.rpm
        remote_file: mongo-tools/pkgs/${build_id}/
        content_type: application/octet-stream
        bucket: mciuploads
        permissions: public-read
        display_name: "Release Artifact - "

    # pack all release artifacts into a tarball and upload them to one
    # place so that they can be more easily downloaded by the sign task
    - command: archive.targz_pack
      params:
        target: src/github.com/mongodb/mongo-tools/upload.tgz
        source_dir: src/github.com/mongodb/mongo-tools
        include:
          - "./release.*"
          - "*.deb"
          - "*.rpm"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/github.com/mongodb/mongo-tools/upload.tgz
        remote_file: mongo-tools/task/dist/${build_id}/all-release-artifacts.tgz
        content_type: application/x-gzip
        bucket: mciuploads
        permissions: public-read
        display_name: All Release Artifacts (.tgz)

  "fetch dist release artifacts":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongo-tools/task/dist/${build_id}/all-release-artifacts.tgz
        extract_to: src/github.com/mongodb/mongo-tools/
        bucket: mciuploads

  "sign msi installer":
    - command: shell.exec
      type: system
      params:
        working_dir: src/github.com/mongodb/mongo-tools/
        silent: true
        script: |
          echo "${signing_auth_token}" > ./signing_auth_token
    - command: shell.exec
      # If the notary service is failing, it should be a system failure to alert the evg team.
      # We overwrite the existing release.msi with a signed version via --package-file-suffix ""
      type: system
      params:
        working_dir: src/github.com/mongodb/mongo-tools/
        script: |
          if [ "${mongo_os}" = "osx" ]; then
              exit 0
          fi
          /usr/local/bin/notary-client.py \
              --key-name "server-Tools" \
              --auth-token-file ./signing_auth_token \
              --comment "Evergreen Automatic Signing (mongo-tools)" \
              --notary-url http://notary-service.build.10gen.cc:5000 \
              --skip-missing \
              --outputs "sig" \
              --package-file-suffix "" \
              release.msi

  "sign macos zip":
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools/
        silent: false
        script: |
          # put apple credentials into env vars
          AC_USERNAME="${ac_username}"
          AC_PASSWORD="${ac_password}"

          # turn on verbose debugging for remainder of script
          set -o xtrace
          set -o errexit
          set -o verbose

          # this function should do nothing on non-mac platforms
          if [ "${mongo_os}" != "osx" ]; then
              exit 0
          fi

          # download and unzip gon
          curl -sL https://github.com/mitchellh/gon/releases/download/v0.2.3/gon_macos.zip > gon.zip
          unzip gon.zip

          # untar the release package and rename dir to "release"
          tar xvzf release.tgz
          pkgname=$(ls | grep mongodb-database-tools)
          rm release.tgz

          # gon signing config
          cat <<EOF_GON_SIGN_JSON > gon-sign.json
          {
            "source" : [
              "$pkgname/bin/bsondump",
              "$pkgname/bin/mongodump",
              "$pkgname/bin/mongoexport",
              "$pkgname/bin/mongofiles",
              "$pkgname/bin/mongoimport",
              "$pkgname/bin/mongorestore",
              "$pkgname/bin/mongostat",
              "$pkgname/bin/mongotop"
            ],
            "bundle_id" : "com.mongodb.mongotools",
            "apple_id": {
              "username": "$AC_USERNAME",
              "password": "$AC_PASSWORD"
            },
            "sign" :{
              "application_identity" : "Developer ID Application: MongoDB, Inc. (4XWMY46275)"
            }
          }
          EOF_GON_SIGN_JSON

          # gon notarization config
          cat <<EOF_GON_NOTARIZE_JSON > gon-notarize.json
          {
            "notarize": [{
              "path": "$PWD/release.zip",
              "bundle_id" : "com.mongodb.mongotools",
              "staple": false
            }],
            "apple_id": {
              "username": "$AC_USERNAME",
              "password": "$AC_PASSWORD"
            }
          }
          EOF_GON_NOTARIZE_JSON

          # sign binaries, re-package as zip, and notarize zip
          ssh -v -p 2222 localhost -t "
            cd $PWD \
            && ./gon -log-level=info gon-sign.json \
            && zip -r release.zip $pkgname \
            && ./gon -log-level=info gon-notarize.json
          "

  "sign linux packages":
    - command: shell.exec
      type: system
      params:
        working_dir: src/github.com/mongodb/mongo-tools/
        silent: true
        script: |
          if [ "${mongo_os}" = "osx" ]; then
              exit 0
          fi
          echo "${signing_auth_token_server_4_4}" > ./signing_auth_token
    - command: shell.exec
      type: system
      params:
        working_dir: src/github.com/mongodb/mongo-tools/
        silent: false
        script: |
          if [ "${mongo_os}" = "osx" ]; then
              exit 0
          fi
          set -o errexit
          if [ -e *.rpm ]; then
             /usr/local/bin/notary-client.py \
                --key-name "server-4.4" \
                --auth-token-file ./signing_auth_token \
                --comment "Evergreen Automatic Signing (mongo-tools)" \
                --notary-url http://notary-service.build.10gen.cc:5000 \
                --skip-missing \
                --package-file-suffix "" \
                --outputs "sig" \
                *.rpm
          fi

  "sign archives":
    - command: shell.exec
      type: system
      params:
        working_dir: src/github.com/mongodb/mongo-tools/
        silent: true
        script: |
          echo "${signing_auth_token}" > ./signing_auth_token
    - command: shell.exec
      type: system
      params:
        working_dir: src/github.com/mongodb/mongo-tools/
        script: |
          if [ "${mongo_os}" = "osx" ]; then
              exit 0
          fi
          /usr/local/bin/notary-client.py \
              --key-name "server-Tools" \
              --auth-token-file ./signing_auth_token \
              --comment "Evergreen Automatic Signing (mongo-tools)" \
              --notary-url http://notary-service.build.10gen.cc:5000 \
              --skip-missing \
              --outputs "sig" \
              *.zip *.tgz

  "upload signed release artifacts":
    # temporary workaround for TOOLS-2606
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          rm -rf ./mongorestore/testdata/longcollectionname/
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - src/github.com/mongodb/mongo-tools/release.*
          - src/github.com/mongodb/mongo-tools/*.deb
          - src/github.com/mongodb/mongo-tools/*.rpm
        remote_file: mongo-tools/task/sign/${build_id}/
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload release packages to s3":
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          ${_set_shell_env}
          go run release/release.go upload-release

  "upload release json feed to s3":
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          ${_set_shell_env}
          go run release/release.go upload-json
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/github.com/mongodb/mongo-tools/release.json
        remote_file: mongo-tools/release/${build_id}/
        optional: true
        content_type: application/json
        bucket: mciuploads
        permissions: public-read

  "generate full JSON feed":
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          ${_set_shell_env}
          go run release/release.go generate-full-json

  "upload release packages to linux repos":
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          curl -L -O http://boxes.10gen.com/build/curator/curator-dist-rhel70-latest.tar.gz
          tar -zxvf curator-dist-rhel70-latest.tar.gz
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          ${_set_shell_env}
          go run release/release.go linux-release

  "fetch source" :
    - command: shell.exec
      params:
        script: |
          set -x
          set -v
          set -e
          mkdir -p src/github.com/mongodb
    - command: git.get_project
      params:
        directory: src/github.com/mongodb/mongo-tools
    - command: git.apply_patch
      params:
        directory: src/github.com/mongodb/mongo-tools
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          set -x
          set -v
          set -e
          mkdir -p bin

  "fetch ftdc" :
  - command: shell.exec
    type: test
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      script: |
        set -x
        set -v
        set -e
        GOPATH=$PWD go get github.com/10gen/ftdc-utils/cmd/ftdc

  "fetch golangci-lint" :
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          set -x
          set -v
          set -e
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s latest

  "create auth_user" :
  - command: shell.exec
    params:
      working_dir: src/github.com/mongodb/mongo-tools
      script: |
        set -x
        set -v
        set -e
        ./bin/mongo --port ${mongod_port} admin --eval "db.createUser({user:\"authorizedUser\", pwd: \"authorizedPwd\", roles:[\"readWriteAnyDatabase\", \"clusterManager\"]});"

  "create sharded_cluster" :
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        background: true
        script: |
          set -x
          set -v
          set -e
          echo "starting sharded cluster"
          mkdir -p /data/db/
          PATH=./bin:$PATH ./bin/mongo --nodb --eval 'var d = new ShardingTest({shards:3, mongos:[{port:${mongod_port}}]}); while(true){sleep(1000)}'
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          set -x
          set -v
          set -e
          ./bin/mongo --nodb --eval 'var d; assert.soon(function(x){try{d = new Mongo("localhost:${mongod_port}"); return true} catch(e){return false}}, "timed out connection");d.setLogLevel(5, "write");'

  "create repl_set" :
    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        background: true
        script: |
          set -x
          set -v
          set -e
          echo "starting repl set"
          MONGO_ARGS="${mongo_args}"
          NODE_OPTIONS=""
          mkdir -p /data/db/
          if [ "${USE_TLS}" = "true" ]; then
            NODE_OPTIONS="${replsettest_tls_config}"
            MONGO_ARGS="${mongo_args_tls}"
          elif [ "${USE_SSL}" = "true" ]; then
            NODE_OPTIONS="${replsettest_ssl_config}"
          fi

          PATH=./bin:$PATH ./bin/mongo $MONGO_ARGS --nodb --eval 'TestData = new Object(); TestData.minPort="${mongod_port}"; var repl = new ReplSetTest({nodes:1, name:"repltester", nodeOptions: {'"$NODE_OPTIONS"'}});repl.startSet();repl.initiate();repl.awaitSecondaryNodes();while(true){sleep(1000);}'

    - command: shell.exec
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          set -x
          set -v
          set -e
          MONGO_ARGS="${mongo_args}"
          if [ "${USE_TLS}" = "true" ]; then
            MONGO_ARGS="${mongo_args_tls}"
          fi;
          ./bin/mongo $MONGO_ARGS --nodb --eval 'assert.soon(function(x){try{var d = new Mongo("localhost:${mongod_port}"); return true} catch(e){return false}}, "timed out connection")'

  "add-aws-auth-variables-to-file":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: src/github.com/mongodb/mongo-tools/common/testdata/lib
        script: |
          set -x
          set -v
          set -e

          cat <<EOF > $(pwd)/aws_e2e_setup.json
          {
            "iam_auth_assume_aws_account": "${iam_auth_assume_aws_account}",
            "iam_auth_assume_aws_secret_access_key": "${iam_auth_assume_aws_secret_access_key}",
            "iam_auth_assume_role_name": "${iam_auth_assume_role_name}"
          }
          EOF

  "setup-aws-auth-test-with-assume-role-credentials":
    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: src/github.com/mongodb/mongo-tools/common/testdata/lib
        script: |
          set -x
          set -v
          set -e

          # The aws_e2e_assume_role script requires python3 with boto3.
          # Set up or use an existing python virtualenv for boto3.
          venv='venv'
          venvNonWindows () { . "$venv"/bin/activate; python3 -m pip install boto3; }
          venvWindows () { . "$venv"/Scripts/activate; pip install boto3; }

          # default to python3 inside mongodbtoolchain
          PATH=/opt/mongodbtoolchain/v3/bin/:$PATH

          if [ -f "$venv"/bin/activate ]; then
            echo 'activating existing virtualenv'
            venvNonWindows
          elif [ -f "$venv"/Scripts/activate ]; then
            echo 'activating existing virtualenv'
            venvWindows
          elif virtualenv "$venv" || python -m virtualenv "$venv"; then
            echo 'creating new virtualenv'
            if [ -f "$venv"/bin/activate ]; then
              echo 'activating new virtualenv'
              venvNonWindows
            elif [ -f "$venv"/Scripts/activate ]; then
              echo 'activating new virtualenv'
              venvWindows
            fi
          fi

          pip list

          ../../../bin/mongo --nodb aws_e2e_assume_role.js

    - command: shell.exec
      type: test
      params:
        silent: true
        working_dir: src/github.com/mongodb/mongo-tools/common/testdata/lib
        script: |
          set -x
          set -v
          set -e

          jsonkey () { python -c "import sys, json; sys.stdout.write(json.load(sys.stdin)['$1'])" < creds.json; }
          urlencode () { python -c "import sys, urllib as ul; sys.stdout.write(ul.quote_plus('$1'))"; }

          USER=$(jsonkey AccessKeyId)
          USER=$(urlencode $USER)

          PASS=$(jsonkey SecretAccessKey)
          PASS=$(urlencode $PASS)

          MONGOD_URI="mongodb://$USER:$PASS@localhost:33333/?authMechanism=MONGODB-AWS"

          SESSION_TOKEN=$(jsonkey SessionToken)
          SESSION_TOKEN=$(urlencode $SESSION_TOKEN)
          if [ -n $SESSION_TOKEN ]; then
              MONGOD_URI="$MONGOD_URI&authMechanismProperties=AWS_SESSION_TOKEN:$SESSION_TOKEN"
          fi

          echo -n "$MONGOD_URI" > MONGOD_URI

pre:
  - command: shell.exec
    params:
      silent: true
      script: |
        set -x
          set -v
        ${killall_mci|pkill -9 mongo; pkill -9 mongodump; pkill -9 mongoexport; pkill -9 mongoimport; pkill -9 mongofiles; pkill -9 mongorestore; pkill -9 mongostat; pkill -9 mongotop; pkill -9 mongod; pkill -9 mongos; pkill -f buildlogger.py; pkill -f smoke.py} >/dev/null 2>&1
        rm -rf src /data/db/*
        exit 0
  - command: shell.exec
    params:
      script: |
        cat <<EOT > expansions.yml
        _set_shell_env: |
          . ./set_goenv.sh
          GOROOT=""; set_goenv || exit
          export EVG_IS_PATCH='${is_patch}'
          export EVG_TRIGGERED_BY_TAG='${triggered_by_git_tag}'
          export EVG_BUILD_ID='${build_id}'
          export EVG_VERSION='${version_id}'
          export EVG_VARIANT='${build_variant}'
          if [ '${_platform}' != '' ]; then
            export EVG_VARIANT='${_platform}'
          fi
          export EVG_USER='${evg_user}'
          export EVG_KEY='${evg_key}'
          export AWS_ACCESS_KEY_ID='${release_aws_access_key_id}'
          export AWS_SECRET_ACCESS_KEY='${release_aws_secret}'
          export NOTARY_TOKEN_4_4='${signing_auth_token_server_4_4}'
          export NOTARY_TOKEN_5_0='${signing_auth_token_server_5_0}'
          export BARQUE_USERNAME='${evg_user}'
          export BARQUE_API_KEY='${barque_api_key}'
          export TOOLS_TESTING_AUTH_USERNAME='${auth_username}'
          export TOOLS_TESTING_AUTH_PASSWORD='${auth_password}'
          export MONGODB_KERBEROS_PASSWORD='${kerberos_password}'
          export ATLAS_URI=${atlas_srv_uri}
          export TOOLS_TESTING_PKCS8_PASSWORD=${pkcs8_password}
          set -o xtrace
          set -o verbose
          set -o errexit
        _maybe_enable_devtoolset_7: |
          if [ '${mongo_os}' == 'rhel62' ]; then
            source /opt/rh/devtoolset-7/enable
          fi
        EOT
  - command: expansions.update
    params:
      file: expansions.yml

post:
    # attach.results works for jstests, gotest.parse_files for golang tests
  - command: attach.results
    params:
      file_location: src/github.com/mongodb/mongo-tools/report.json
  - command: gotest.parse_files
    params:
      files: ["src/github.com/mongodb/mongo-tools/testing_output/*.suite"]
  - command: shell.exec
    params:
      silent: true
      script: |
        set -x
        set -v
        ${killall_mci|pkill -9 mongo; pkill -9 mongodump; pkill -9 mongoexport; pkill -9 mongoimport; pkill -9 mongofiles; pkill -9 mongorestore; pkill -9 mongostat; pkill -9 mongotop; pkill -9 mongod; pkill -9 mongos; pkill -f buildlogger.py; pkill -f smoke.py} >/dev/null 2>&1
        exit 0
  - command: shell.exec
    params:
      script: |
        set -x
          set -v
        rm -rf /data/db/*
        exit 0

timeout:
  - command: shell.exec
    params:
      silent: true
      script: |
        set -x
          set -v
        # don't attempt to abort on any distro which has a special way of
        # killing everything (i.e. using taskkill on Windows)
        if [ "${killall_mci}" = "" ]; then
          all_tools="bsondump mongodump mongoexport mongofiles mongoimport mongorestore mongostat mongotop"
          # send SIGABRT to print a stacktrace for any hung tool
          pkill -ABRT "^($(echo -n $all_tools | tr ' ' '|'))\$"
          # git the processes a second or two to dump their stacks
          sleep 10
        fi


tasks:
- name: dist
  tags: ["git_tag"]
  depends_on:
  commands:
    - func: "fetch source"
    # bsondump
    - func: "run make target"
      vars:
        target: build
    - func: "create release artifacts"

# Regardless of the buildvariant, the sign task must be run on a
# distro that has the notary client available. We will use
# amazon1-2018-test for this purpose. The notary client is not
# available on all distros, which is why sign must be a separate task.
- name: sign
  tags: ["git_tag"]
  depends_on:
    - name: dist
  commands:
    - func: "fetch dist release artifacts"
    - func: "sign msi installer"
    - func: "sign macos zip"
    - func: "sign linux packages"
    - func: "sign archives"
    - func: "upload signed release artifacts"

- name: push
  tags: ["git_tag"]
  depends_on:
    - name: sign
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "upload release packages to s3"
    - func: "upload release packages to linux repos"

- name: release-json
  tags: ["git_tag"]
  depends_on:
    - name: push
      variant: '*'
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "upload release json feed to s3"

- name: generate-full-json
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "generate full JSON feed"

- name: integration-3.4
  tags: ["3.4"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "3.4"
    - func: "start mongod"
    - func: "wait for mongod to be ready"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-3.4-mmapv1
  tags: ["3.4", "mmap"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "3.4"
    - func: "start mongod"
      vars:
        STORAGE_ENGINE: "mmapv1"
    - func: "wait for mongod to be ready"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-3.6
  tags: ["3.6"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "3.6"
    - func: "start mongod"
    - func: "wait for mongod to be ready"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-3.6-mmapv1
  tags: ["3.6", "mmap"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "3.6"
    - func: "start mongod"
      vars:
        STORAGE_ENGINE: "mmapv1"
    - func: "wait for mongod to be ready"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-4.0
  tags: ["4.0"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "4.0"
    - func: "start mongod"
    - func: "wait for mongod to be ready"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-4.0-auth
  tags: ["4.0", "auth"]
  commands:
    - func: "fetch source"
    # Concat auth args
    - command: expansions.update
      params:
        updates:
          - key: "mongod_args"
            concat: " --auth"
    - func: "download mongod"
      vars:
        mongo_version: "4.0"
    - func: "start mongod"
    - func: "wait for mongod to be ready"
    - func: "create mongod users"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -auth=true

- name: integration-4.0-cluster
  tags: ["4.0", "cluster"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "4.0"
    - func: "create repl_set"
      vars:
        USE_SSL: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-4.0-mmapv1
  tags: ["4.0", "mmap"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "4.0"
    - func: "start mongod"
      vars:
        STORAGE_ENGINE: "mmapv1"
    - func: "wait for mongod to be ready"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-4.2
  tags: ["4.2"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "4.2"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-4.2-auth
  tags: ["4.2", "auth"]
  commands:
    - func: "fetch source"
    # Concat auth args
    - command: expansions.update
      params:
        updates:
          - key: "mongod_args"
            concat: " --auth"
    - func: "download mongod"
      vars:
        mongo_version: "4.2"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "create mongod users"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -auth=true

- name: integration-4.4
  tags: ["4.4"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "4.4"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-4.4-auth
  tags: ["4.4", "auth"]
  commands:
    - func: "fetch source"
    # Concat auth args
    - command: expansions.update
      params:
        updates:
          - key: "mongod_args_tls"
            concat: " --auth"
    - func: "download mongod"
      vars:
        mongo_version: "4.4"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "create mongod users"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -auth=true

- name: integration-4.4-cluster
  tags: ["4.4", "cluster"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "4.4"
    - func: "create repl_set"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -topology=replSet

- name: integration-5.0
  tags: ["5.0"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.0"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-5.0-auth
  tags: ["5.0", "auth"]
  commands:
    - func: "fetch source"
    # Concat auth args
    - command: expansions.update
      params:
        updates:
          - key: "mongod_args_tls"
            concat: " --auth"
    - func: "download mongod"
      vars:
        mongo_version: "5.0"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "create mongod users"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -auth=true

- name: integration-5.0-cluster
  tags: ["5.0", "cluster"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.0"
    - func: "create repl_set"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -topology=replSet

- name: aws-auth-5.0
  tags: ["5.0", "aws-auth"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.0"
    - func: "start mongod"
      vars:
        AWS_AUTH: "true"
    - func: "wait for mongod to be ready"
      vars:
        AWS_AUTH: "true"
    - func: "add-aws-auth-variables-to-file"
    - func: "setup-aws-auth-test-with-assume-role-credentials"
    - func: "run make target"
      vars:
        target: test:awsauth

- name: integration-5.1
  tags: ["5.1"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.1"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-5.1-auth
  tags: ["5.1", "auth"]
  commands:
    - func: "fetch source"
    # Concat auth args
    - command: expansions.update
      params:
        updates:
          - key: "mongod_args_tls"
            concat: " --auth"
    - func: "download mongod"
      vars:
        mongo_version: "5.1"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "create mongod users"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -auth=true

- name: integration-5.1-cluster
  tags: ["5.1", "cluster"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.1"
    - func: "create repl_set"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -topology=replSet

- name: aws-auth-5.1
  tags: ["5.1", "aws-auth"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.1"
    - func: "start mongod"
      vars:
        AWS_AUTH: "true"
    - func: "wait for mongod to be ready"
      vars:
        AWS_AUTH: "true"
    - func: "add-aws-auth-variables-to-file"
    - func: "setup-aws-auth-test-with-assume-role-credentials"
    - func: "run make target"
      vars:
        target: test:awsauth

- name: integration-5.2
  tags: ["5.2"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.2"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-5.2-auth
  tags: ["5.2", "auth"]
  commands:
    - func: "fetch source"
    # Concat auth args
    - command: expansions.update
      params:
        updates:
          - key: "mongod_args_tls"
            concat: " --auth"
    - func: "download mongod"
      vars:
        mongo_version: "5.2"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "create mongod users"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -auth=true

- name: integration-5.2-cluster
  tags: ["5.2", "cluster"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.2"
    - func: "create repl_set"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -topology=replSet

- name: aws-auth-5.2
  tags: ["5.2", "aws-auth"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.2"
    - func: "start mongod"
      vars:
        AWS_AUTH: "true"
    - func: "wait for mongod to be ready"
      vars:
        AWS_AUTH: "true"
    - func: "add-aws-auth-variables-to-file"
    - func: "setup-aws-auth-test-with-assume-role-credentials"
    - func: "run make target"
      vars:
        target: test:awsauth

- name: integration-5.3
  tags: ["5.3"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.3"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true

- name: integration-5.3-auth
  tags: ["5.3", "auth"]
  commands:
    - func: "fetch source"
    # Concat auth args
    - command: expansions.update
      params:
        updates:
          - key: "mongod_args_tls"
            concat: " --auth"
    - func: "download mongod"
      vars:
        mongo_version: "5.3"
    - func: "start mongod"
      vars:
        USE_TLS: "true"
    - func: "wait for mongod to be ready"
      vars:
        USE_TLS: "true"
    - func: "create mongod users"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -auth=true

- name: integration-5.3-cluster
  tags: ["5.3", "cluster"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.3"
    - func: "create repl_set"
      vars:
        USE_TLS: "true"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:integration test:srv -ssl=true -topology=replSet

- name: aws-auth-5.3
  tags: ["5.3", "aws-auth"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "5.3"
    - func: "start mongod"
      vars:
        AWS_AUTH: "true"
    - func: "wait for mongod to be ready"
      vars:
        AWS_AUTH: "true"
    - func: "add-aws-auth-variables-to-file"
    - func: "setup-aws-auth-test-with-assume-role-credentials"
    - func: "run make target"
      vars:
        target: test:awsauth

# XXX - we are temporarily disabling all tests with 6.0 and latest until we
# resolve the issue with installing the mongo shell. See
# https://jira.mongodb.org/browse/TOOLS-3110 for details.

# - name: integration-6.0
#   tags: ["6.0"]
#   commands:
#     - func: "fetch source"
#     - command: expansions.update
#     - func: "download mongod"
#       vars:
#         mongo_version: "6.0"
#     - func: "start mongod"
#       vars:
#         USE_TLS: "true"
#     - func: "wait for mongod to be ready"
#       vars:
#         USE_TLS: "true"
#     - func: "run make target"
#       vars:
#         target: build
#     - func: "run make target"
#       vars:
#         target: test:integration test:srv -ssl=true

# - name: integration-6.0-auth
#   tags: ["6.0", "auth"]
#   commands:
#     - func: "fetch source"
#     # Concat auth args
#     - command: expansions.update
#       params:
#         updates:
#           - key: "mongod_args_tls"
#             concat: " --auth"
#     - func: "download mongod"
#       vars:
#         mongo_version: "6.0"
#     - func: "start mongod"
#       vars:
#         USE_TLS: "true"
#     - func: "wait for mongod to be ready"
#       vars:
#         USE_TLS: "true"
#     - func: "create mongod users"
#       vars:
#         USE_TLS: "true"
#     - func: "run make target"
#       vars:
#         target: build
#     - func: "run make target"
#       vars:
#         target: test:integration test:srv -ssl=true -auth=true

# - name: integration-6.0-cluster
#   tags: ["6.0", "cluster"]
#   commands:
#     - func: "fetch source"
#     - command: expansions.update
#     - func: "download mongod"
#       vars:
#         mongo_version: "6.0"
#     - func: "create repl_set"
#       vars:
#         USE_TLS: "true"
#     - func: "run make target"
#       vars:
#         target: build
#     - func: "run make target"
#       vars:
#         target: test:integration test:srv -ssl=true -topology=replSet

# - name: aws-auth-6.0
#   tags: ["6.0", "aws-auth"]
#   commands:
#     - func: "fetch source"
#     - command: expansions.update
#     - func: "download mongod"
#       vars:
#         mongo_version: "6.0"
#     - func: "start mongod"
#       vars:
#         AWS_AUTH: "true"
#     - func: "wait for mongod to be ready"
#       vars:
#         AWS_AUTH: "true"
#     - func: "add-aws-auth-variables-to-file"
#     - func: "setup-aws-auth-test-with-assume-role-credentials"
#     - func: "run make target"
#       vars:
#         target: test:awsauth

# - name: integration-latest
#   tags: ["latest"]
#   commands:
#     - func: "fetch source"
#     - command: expansions.update
#     - func: "download mongod"
#       vars:
#         mongo_version: "latest"
#     - func: "start mongod"
#       vars:
#         USE_TLS: "true"
#     - func: "wait for mongod to be ready"
#       vars:
#         USE_TLS: "true"
#     - func: "run make target"
#       vars:
#         target: build
#     - func: "run make target"
#       vars:
#         target: test:integration test:srv -ssl=true

# - name: integration-latest-auth
#   tags: ["latest", "auth"]
#   commands:
#     - func: "fetch source"
#     # Concat auth args
#     - command: expansions.update
#       params:
#         updates:
#           - key: "mongod_args_tls"
#             concat: " --auth"
#     - func: "download mongod"
#       vars:
#         mongo_version: "latest"
#     - func: "start mongod"
#       vars:
#         USE_TLS: "true"
#     - func: "wait for mongod to be ready"
#       vars:
#         USE_TLS: "true"
#     - func: "create mongod users"
#       vars:
#         USE_TLS: "true"
#     - func: "run make target"
#       vars:
#         target: build
#     - func: "run make target"
#       vars:
#         target: test:integration test:srv -ssl=true -auth=true

# - name: integration-latest-cluster
#   tags: ["latest", "cluster"]
#   commands:
#     - func: "fetch source"
#     - command: expansions.update
#     - func: "download mongod"
#       vars:
#         mongo_version: "latest"
#     - func: "create repl_set"
#       vars:
#         USE_TLS: "true"
#     - func: "run make target"
#       vars:
#         target: build
#     - func: "run make target"
#       vars:
#         target: test:integration test:srv -ssl=true -topology=replSet

# - name: aws-auth-latest
#   tags: ["latest", "aws-auth"]
#   commands:
#     - func: "fetch source"
#     - command: expansions.update
#     - func: "download mongod"
#       vars:
#         mongo_version: "latest"
#     - func: "start mongod"
#       vars:
#         AWS_AUTH: "true"
#     - func: "wait for mongod to be ready"
#       vars:
#         AWS_AUTH: "true"
#     - func: "add-aws-auth-variables-to-file"
#     - func: "setup-aws-auth-test-with-assume-role-credentials"
#     - func: "run make target"
#       vars:
#         target: test:awsauth

- name: aws-auth-4.4
  tags: ["4.4", "aws-auth"]
  commands:
    - func: "fetch source"
    - command: expansions.update
    - func: "download mongod"
      vars:
        mongo_version: "4.4"
    - func: "start mongod"
      vars:
        AWS_AUTH: "true"
    - func: "wait for mongod to be ready"
      vars:
        AWS_AUTH: "true"
    - func: "add-aws-auth-variables-to-file"
    - func: "setup-aws-auth-test-with-assume-role-credentials"
    - func: "run make target"
      vars:
        target: test:awsauth

- name: kerberos
  tags: ["kerberos"]
  commands:
    - func: "fetch source"
    # Explicitly run ONLY Kerberos tests
    - command: expansions.update
      params:
        updates:
          - key: "args"
            value: "${args} -test.types=kerberos"
    - func: "setup integration test"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:kerberos

- name: legacy-jstests-4.2 # The server jstests from the tools removal from server in 4.2
  tags: ["4.2"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "4.2"
    - func: "run make target"
      vars:
        target: build
    - func: "run legacy tests"
      vars:
        test_path: "test/legacy42"

- name: legacy-jstests-4.4 # The server jstests from the tools removal from server in 4.2
  tags: ["4.4"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "4.4"
    - func: "run make target"
      vars:
        target: build
    - func: "run legacy tests"
      vars:
        test_path: "test/legacy42"

- name: legacy-jstests-5.0 # The server jstests from the tools removal from server in 4.2
  tags: ["5.0"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "5.0"
    - func: "run make target"
      vars:
        target: build
    - func: "run legacy tests"
      vars:
        test_path: "test/legacy42"

- name: legacy-jstests-5.1 # The server jstests from the tools removal from server in 4.2
  tags: ["5.1"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "5.1"
    - func: "run make target"
      vars:
        target: build
    - func: "run legacy tests"
      vars:
        test_path: "test/legacy42"

- name: legacy-jstests-5.2 # The server jstests from the tools removal from server in 4.2
  tags: ["5.2"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "5.2"
    - func: "run make target"
      vars:
        target: build
    - func: "run legacy tests"
      vars:
        test_path: "test/legacy42"

- name: legacy-jstests-5.3 # The server jstests from the tools removal from server in 4.2
  tags: ["5.3"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "5.3"
    - func: "run make target"
      vars:
        target: build
    - func: "run legacy tests"
      vars:
        test_path: "test/legacy42"

# - name: legacy-jstests-6.0 # The server jstests from the tools removal from server in 4.2
#   tags: ["6.0"]
#   commands:
#     - func: "fetch source"
#     - func: "get buildnumber"
#     - func: "setup credentials"
#     - func: "download mongod"
#       vars:
#         mongo_version: "6.0"
#     - func: "run make target"
#       vars:
#         target: build
#     - func: "run legacy tests"
#       vars:
#         test_path: "test/legacy42"

# - name: legacy-jstests-latest # The server jstests from the tools removal from server in 4.2
#   tags: ["latest"]
#   commands:
#     - func: "fetch source"
#     - func: "get buildnumber"
#     - func: "setup credentials"
#     - func: "download mongod"
#       vars:
#         mongo_version: "latest"
#     - func: "run make target"
#       vars:
#         target: build
#     - func: "run legacy tests"
#       vars:
#         test_path: "test/legacy42"

- name: mod-tidy
  commands:
    - func: "fetch source"
    - func: "run make target"
      vars:
        target: sa:modtidy

- name: evergreen-validate
  commands:
    - func: "fetch source"
    - func: "run make target"
      vars:
        target: sa:evgvalidate

- name: format-go
  commands:
    - func: "fetch source"
    - func: "fetch golangci-lint"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          ${_set_shell_env}
          PATH=$PATH:$PWD/bin golangci-lint run --disable-all -E gofmt ./...
          exit $?

- name: lint-go
  commands:
    - func: "fetch source"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          ${_set_shell_env}
          retVal=$(go run vendor/github.com/3rf/mongo-lint/golint/golint.go mongo* bson*);
          if [ "$retVal" = "" ]; then exit 0; else echo $retVal; exit 1; fi;

- name: lint-js
  commands:
    - func: "fetch source"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          set -x
          set -v
          set -e
          PATH="/opt/node/bin:$PATH"
          /opt/node/bin/npm install eslint@3.2
          /opt/node/bin/node node_modules/eslint/bin/eslint.js test/qa-tests/jstests/**/*.js

- name: qa-tests-5.0
  tags: ["5.0"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "5.0"
    - func: "run make target"
      vars:
        target: build
    - func: "run qa-tests"
      vars:
        resmoke_suite: "core${resmoke_use_tls}"
        excludes: "requires_unstable,${excludes}"

- name: qa-tests-5.1
  tags: ["5.1"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "5.1"
    - func: "run make target"
      vars:
        target: build
    - func: "run qa-tests"
      vars:
        resmoke_suite: "core${resmoke_use_tls}"
        excludes: "requires_unstable,${excludes}"

- name: qa-tests-5.2
  tags: ["5.2"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "5.2"
    - func: "run make target"
      vars:
        target: build
    - func: "run qa-tests"
      vars:
        resmoke_suite: "core${resmoke_use_tls}"
        excludes: "requires_unstable,${excludes}"

- name: qa-tests-5.3
  tags: ["5.3"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "5.3"
    - func: "run make target"
      vars:
        target: build
    - func: "run qa-tests"
      vars:
        resmoke_suite: "core${resmoke_use_tls}"
        excludes: "requires_unstable,${excludes}"

# - name: qa-tests-6.0
#   tags: ["6.0"]
#   commands:
#     - func: "fetch source"
#     - func: "get buildnumber"
#     - func: "setup credentials"
#     - func: "download mongod"
#       vars:
#         mongo_version: "6.0"
#     - func: "run make target"
#       vars:
#         target: build
#     - func: "run qa-tests"
#       vars:
#         resmoke_suite: "core${resmoke_use_tls}"
#         excludes: "requires_unstable,${excludes}"

# - name: qa-tests-latest
#   tags: ["latest"]
#   commands:
#     - func: "fetch source"
#     - func: "get buildnumber"
#     - func: "setup credentials"
#     - func: "download mongod"
#       vars:
#         mongo_version: "latest"
#     - func: "run make target"
#       vars:
#         target: build
#     - func: "run qa-tests"
#       vars:
#         resmoke_suite: "core${resmoke_use_tls}"
#         excludes: "requires_unstable,${excludes}"

- name: qa-tests-4.4
  tags: ["4.4"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "4.4"
    - func: "run make target"
      vars:
        target: build
    - func: "run qa-tests"
      vars:
        resmoke_suite: "core${resmoke_use_tls}"
        excludes: "requires_unstable,${excludes}"

- name: qa-tests-4.2
  tags: ["4.2"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "4.2"
    - func: "run make target"
      vars:
        target: build
    - func: "run qa-tests"
      vars:
        resmoke_suite: "core${resmoke_use_tls}"
        excludes: "requires_unstable,${excludes}"

- name: qa-tests-4.0
  tags: ["4.0"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "4.0"
    - func: "run make target"
      vars:
        target: build
    - func: "run qa-tests"
      vars:
        resmoke_suite: "core${resmoke_use_ssl}"
        excludes: "requires_min_mongo_42,requires_unstable,${excludes}"

- name: qa-tests-3.6
  tags: ["3.6"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "3.6"
    - func: "run make target"
      vars:
        target: build
    - func: "run qa-tests"
      vars:
        resmoke_suite: "core${resmoke_use_ssl}"
        excludes: "requires_min_mongo_40,requires_min_mongo_42,requires_unstable,${excludes}"

- name: qa-tests-3.4
  tags: ["3.4"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "3.4"
    - func: "run make target"
      vars:
        target: build
    - func: "run qa-tests"
      vars:
        resmoke_suite: "core${resmoke_use_ssl}"
        excludes: "requires_min_mongo_36,requires_min_mongo_40,requires_min_mongo_42,requires_unstable,${excludes}"

- name: qa-tests-3.2
  tags: ["3.2"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "3.2"
    - func: "run make target"
      vars:
        target: build
    - func: "run qa-tests"
      vars:
        resmoke_suite: "core${resmoke_use_ssl}"
        excludes: "requires_min_mongo_34,requires_min_mongo_36,requires_min_mongo_40,requires_min_mongo_42,requires_unstable,${excludes}"

- name: native-cert-ssl-4.4
  tags: ["4.4"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "4.4"
    - func: "run make target"
      vars:
        target: build
    - func: "run native-cert-ssl"

- name: qa-dump-restore-with-archiving-4.4
  tags: ["4.4"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "4.4"
    - func: "run make target"
      vars:
        target: build -tools=mongodump,mongorestore
    - func: "run qa-tests"
      vars:
        resmoke_suite: "restore_archive"
        excludes: "requires_unstable,${excludes}"

- name: qa-dump-restore-with-gzip-4.4
  tags: ["4.4"]
  commands:
    - func: "fetch source"
    - func: "get buildnumber"
    - func: "setup credentials"
    - func: "download mongod"
      vars:
        mongo_version: "4.4"
    - func: "run make target"
      vars:
        target: build -tools=mongodump,mongorestore
    - func: "run qa-tests"
      vars:
        resmoke_suite: "restore_gzip"
        excludes: "requires_unstable,${excludes}"

- name: unit
  commands:
    - command: expansions.update
    - func: "fetch source"
    - func: "run make target"
      vars:
        target: build
    - func: "run make target"
      vars:
        target: test:unit

- name: vet
  commands:
    - func: "fetch source"
    - command: shell.exec
      type: test
      params:
        working_dir: src/github.com/mongodb/mongo-tools
        script: |
          set -x
          set -v
          set -e
          go tool vet bsondump mongo*


buildvariants:

#######################################
#     Static Analysis Buildvariant    #
#######################################

- name: static
  display_name: '! Static Analysis'
  run_on:
  - rhel62-small
  expansions:
    _platform: rhel62
  tasks:
  - name: format-go
  - name: lint-go
  - name: lint-js
  - name: mod-tidy
  - name: evergreen-validate
  - name: vet

#######################################
#     Release Manager Buildvariant    #
#######################################

- name: release
  display_name: 'Release Manager'
  tags: ["git_tag"]
  run_on:
  - amazon1-2018-test
  tasks:
  - name: release-json
  - name: generate-full-json

#######################################
#     Amazon x86_64 Buildvariants     #
#######################################

- name: amazon
  display_name: Amazon Linux 64
  run_on:
  - amazon1-2018-test
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "amzn64"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".3.4"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: amazon2
  display_name: Amazon Linux 64 v2
  run_on:
  - amazon2-test
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "amazon2"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

#######################################
#     Debian x86_64 Buildvariants     #
#######################################

- name: debian81
  display_name: Debian 8.1
  run_on:
  - debian81-test
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "debian81"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".3.4"
  - name: ".3.6"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: debian92
  display_name: Debian 9.2
  run_on:
  - debian92-test
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "debian92"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: debian10
  display_name: Debian 10
  run_on:
    - debian10-test
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "debian10"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: debian11
  display_name: Debian 11
  run_on:
    - debian11
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "debian11"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  # We do not support 5.1-5.3 on Debian 11
  tasks:
  - name: "unit"
  - name: ".5.0"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

#######################################
#           macOS Buildvariant        #
#######################################

- name: macos
  display_name: MacOS 10.14
  run_on:
  - macos-1014
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "osx"
    mongo_target: "osx-ssl"
    excludes: requires_many_files
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    USE_SSL: "true"
  tasks:
  - name: "unit"
  - name: ".3.4"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4 !.aws-auth"
  - name: ".5.0 !.aws-auth"
  - name: ".5.3 !.aws-auth"
#  - name: ".6.0 !.aws-auth"
#  - name: ".latest !.aws-auth"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: macos-1014-codesign
  - name: "push"
    run_on: rhel70-small

#######################################
#     RHEL x86_64 Buildvariants       #
#######################################

- name: rhel62
  display_name: RHEL 6.2
  run_on:
  - rhel62-small
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "rhel62"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".3.4"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: rhel70
  display_name: RHEL 7.0
  run_on:
  - rhel70-small
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "rhel70"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".3.4"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: rhel80
  display_name: RHEL 8.0
  run_on:
  - rhel80-test
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "rhel80"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

#######################################
#     SUSE x86_64 Buildvariants       #
#######################################

# Skipping kerberos tests on SUSE, see TOOLS-3014

- name: suse12
  display_name: SUSE 12
  run_on:
  - suse12-sp5-small
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "suse12"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".3.4"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: suse15
  display_name: SUSE 15
  run_on:
    - suse15sp2-small
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "suse15"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

#######################################
#    Ubuntu x86_64 Buildvariants      #
#######################################

- name: ubuntu1604
  display_name: Ubuntu 16.04
  run_on:
  - ubuntu1604-test
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu1604"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".3.4"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: ubuntu1804
  display_name: Ubuntu 18.04
  run_on:
  - ubuntu1804-test
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu1804"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: ubuntu2004
  display_name: Ubuntu 20.04
  run_on:
  - ubuntu2004-small
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu2004"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: ubuntu2204
  display_name: Ubuntu 22.04
  run_on:
  - ubuntu2204-small
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu2204"
    mongo_edition: "enterprise"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    edition: enterprise
    run_kinit: true
    resmoke_args: --jobs 4
  tasks:
  - name: "unit"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

#######################################
#        Windows Buildvariants        #
#######################################

- name: windows
  display_name: Windows 64-bit
  run_on:
  - windows-vsCurrent-large
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "windows-64"
    mongo_edition: "enterprise"
    mongo_target: "windows"
    smoke_use_ssl: --use-ssl
    resmoke_args: --jobs 4
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    excludes: requires_large_ram,requires_mongo_24
    edition: enterprise
    extension: .exe
    preproc_gpm: "perl -pi -e 's/\\r\\n/\\n/g' "
    USE_SSL: "true"
  tasks:
  - name: "unit"
  - name: ".3.4"
  # Disabled, see TOOLS-2662
  # - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

#######################################
#        ARM Buildvariants            #
#######################################

- name: ubuntu1604-arm64
  display_name: ZAP ARM64 Ubuntu 16.04
  run_on:
  - ubuntu1604-arm64
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu1604"
    mongo_edition: "enterprise"
    mongo_arch: "arm64"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    excludes: requires_mmap_available,requires_large_ram,requires_mongo_24,requires_mongo_26,requires_mongo_30
    resmoke_args: -j 2
    edition: "enterprise"
    USE_SSL: "true"
  tasks:
  - name: "unit"
  - name: ".3.4 !.mmap"
  - name: ".3.6 !.mmap"
  - name: ".4.0 !.mmap"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: ubuntu1804-arm64
  display_name: ZAP ARM64 Ubuntu 18.04
  run_on:
  - ubuntu1804-arm64
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu1804"
    mongo_edition: "enterprise"
    mongo_arch: "aarch64"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    excludes: requires_mmap_available,requires_large_ram,requires_mongo_24,requires_mongo_26,requires_mongo_30
    resmoke_args: -j 2
    edition: "enterprise"
    USE_SSL: "true"
  tasks:
  - name: "unit"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

# MongoDB 4.4+
- name: ubuntu2004-arm64
  display_name: ZAP ARM64 Ubuntu 20.04
  run_on:
    - ubuntu2004-arm64
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu2004"
    mongo_edition: "enterprise"
    mongo_arch: "aarch64"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    excludes: requires_mmap_available,requires_large_ram,requires_mongo_24,requires_mongo_26,requires_mongo_30
    resmoke_args: -j 2
    edition: "enterprise"
    USE_SSL: "true"
  tasks:
  - name: "unit"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: ubuntu2204-arm64
  display_name: ZAP ARM64 Ubuntu 22.04
  run_on:
    - ubuntu2204-arm64-small
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu2204"
    mongo_edition: "enterprise"
    mongo_arch: "aarch64"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    excludes: requires_mmap_available,requires_large_ram,requires_mongo_24,requires_mongo_26,requires_mongo_30
    resmoke_args: -j 2
    edition: "enterprise"
    USE_SSL: "true"
  tasks:
  - name: "unit"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: amazon2-arm64
  display_name: Amazon Linux ARM v2
  run_on:
  - amazon2-arm64-small
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "amazon2"
    mongo_edition: "enterprise"
    mongo_arch: "aarch64"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    excludes: requires_mmap_available,requires_large_ram,requires_mongo_24,requires_mongo_26,requires_mongo_30
    resmoke_args: -j 2
    edition: "enterprise"
    USE_SSL: "true"
  tasks:
  - name: "unit"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: rhel82-arm64
  display_name: RHEL 8.2 ARM
  run_on:
    - rhel82-arm64
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "rhel82"
    mongo_edition: "enterprise"
    mongo_arch: "aarch64"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    excludes: requires_mmap_available,requires_large_ram,requires_mongo_24,requires_mongo_26,requires_mongo_30
    resmoke_args: -j 2
    edition: "enterprise"
    USE_SSL: "true"
  tasks:
  - name: "unit"
  - name: ".4.4"
  - name: ".5.0"
  - name: ".5.3"
#  - name: ".6.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small


#######################################
#        Power Buildvariants          #
#######################################

- name: rhel71-ppc64le
  display_name: ZAP PPC64LE RHEL 7.1
  run_on:
  - rhel71-power8
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "rhel71"
    mongo_edition: "enterprise"
    mongo_arch: "ppc64le"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    resmoke_args: -j 4
    excludes: requires_mmap_available,requires_large_ram,requires_mongo_24,requires_mongo_26,requires_mongo_30
    edition: enterprise
    run_kinit: true
  tasks:
  - name: "unit"
  - name: ".3.4 !.mmap"
  - name: ".3.6 !.mmap"
  - name: ".4.0 !.mmap"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: rhel81-ppc64le
  display_name: ZAP PPC64LE RHEL 8.1
  run_on:
  - rhel81-power8
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "rhel81"
    mongo_edition: "enterprise"
    mongo_arch: "ppc64le"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    resmoke_args: -j 4
    excludes: requires_mmap_available,requires_large_ram,requires_mongo_24,requires_mongo_26,requires_mongo_30
    edition: enterprise
    run_kinit: true
  tasks:
  - name: "unit"
  - name: ".4.2"
  # Skipping aws-auth, see TOOLS-3015
  - name: ".4.4 !.aws-auth"
  - name: ".5.0 !.aws-auth"
  - name: ".5.3 !.aws-auth"
#  - name: ".6.0 !.aws-auth"
#  - name: ".latest !.aws-auth"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

# MongoDB 4.0
- name: ubuntu1604-ppc64le
  display_name: ZAP PPC64LE Ubuntu 16.04
  run_on:
  - ubuntu1604-power8
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu1604"
    mongo_edition: "enterprise"
    mongo_arch: "ppc64le"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    resmoke_args: -j 4
    excludes: requires_mmap_available,requires_large_ram,requires_mongo_24,requires_mongo_26,requires_mongo_30
    edition: enterprise
    run_kinit: true
  tasks:
  - name: "unit"
  - name: ".4.0 !.mmap"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

# MongoDB 4.2+
- name: ubuntu1804-ppc64le
  display_name: ZAP PPC64LE Ubuntu 18.04
  run_on:
  - ubuntu1804-power8
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu1804"
    mongo_edition: "enterprise"
    mongo_arch: "ppc64le"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    resmoke_args: -j 4
    excludes: requires_mmap_available,requires_large_ram,requires_mongo_24,requires_mongo_26,requires_mongo_30
    edition: enterprise
    run_kinit: true
  tasks:
  - name: "unit"
  - name: ".4.2"
  - name: ".4.4"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

#######################################
#     Z (s390x) Buildvariants         #
#######################################

- name: rhel72-s390x
  display_name: ZAP s390x RHEL 7.2
  run_on:
  - rhel72-zseries
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "rhel72"
    mongo_edition: "enterprise"
    mongo_arch: "s390x"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    excludes: requires_mmap_available,requires_mongo_24,requires_mongo_26,requires_mongo_30
    resmoke_args: -j 2
    edition: enterprise
    run_kinit: true
  tasks:
  - name: "unit"
  - name: ".4.4"
  - name: ".5.0"
  # We did not do a release of 5.3 for RHEL 7.2 on s390x. There should be a
  # 6.x release in the future, but there is no 6.0.
  - name: ".5.1"
  - name: ".5.2"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

- name: rhel83-s390x
  display_name: ZAP s390x RHEL 8.3
  run_on:
  - rhel83-zseries
  stepback: false
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "rhel83"
    mongo_edition: "enterprise"
    mongo_arch: "s390x"
    smoke_use_ssl: --use-ssl
    resmoke_use_ssl: _ssl
    smoke_use_tls: --use-tls
    resmoke_use_tls: _tls
    excludes: requires_mmap_available,requires_mongo_24,requires_mongo_26,requires_mongo_30
    resmoke_args: -j 2
    edition: enterprise
    run_kinit: true
  tasks:
  - name: "unit"
  # We only have 5.0.x and 6+ releases for RHEL 8.x on s390x
  - name: ".5.0"
#  - name: ".latest"
  - name: ".kerberos"
  - name: "dist"
  - name: "sign"
    run_on: rhel80-small
  - name: "push"
    run_on: rhel80-small

#######################################
#     Experimental Buildvariants      #
#######################################

- name: ubuntu-race
  stepback: false
  display_name: ~ Race Detector Ubuntu 18.04
  run_on:
  - ubuntu1804-small
  expansions:
    <<: [ *mongod_ssl_startup_args, *mongo_ssl_startup_args, *mongod_tls_startup_args, *mongo_tls_startup_args ]
    mongo_os: "ubuntu1804"
    mongo_edition: "enterprise"
    args: "-buildmode=default -race"
    excludes: requires_large_ram
    resmoke_use_tls: _tls
    resmoke_use_ssl: _ssl
    USE_SSL: "true"
  tasks:
  - name: "unit"
  - name: ".3.6"
  - name: ".4.0"
  - name: ".4.2"
  - name: ".4.4"
